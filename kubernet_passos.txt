#INSTALAÇÃO 

->DOCKER 
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu
sudo usermod -aG docker $USER


-> kubernetes
sudo apt-get update && sudo apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

systemctl daemon-reload
systemctl restart kubelet

-----------------------------------------------------------------------------------------------

INICIANDO CLUSTER 
sudo kubeadm init --pod-network-cidr=10.244.0.0/16

SE DER ISSO :
[WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/
cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

mkdir -p /etc/systemd/system/docker.service.d

# Restart docker.
systemctl daemon-reload
systemctl restart docker

-----------------

 mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

   kubectl cluster-info
-----------------
FLANNEL
sysctl net.bridge.bridge-nf-call-iptables=1

For Kubernetes v1.7+ 
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml


Para permitir master execução 
kubectl taint nodes --all node-role.kubernetes.io/master-

Criando deploy | Serviço
kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080
kubectl get deploy
NAME                  READY   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   1/1     1            1           50s


Test rapido 
kubectl proxy
curl http://localhost:8001/

curl http://localhost:8001/api/v1/namespaces/default/pods/kubernetes-bootcamp-765bf4c7b4-6c8lq/proxy/
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-765bf4c7b4-6c8lq | v=1


-------------------------------------------------------------------------------------
Deploy via Arquivo Estruturado (YAML)
Essa nossa execução, gerou em nosso cluster um recurso estruturado, podemos acessá-lo através de:
kubectl get deploy kubernetes-bootcamp -o yaml
Ou até mesmo editá-lo em tempo real:
kubectl edit deploy kubernetes-bootcamp

----------------------------------------------------------------------------------------------

Dashboard kubernetes
#ADD 
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc2/aio/deploy/recommended.yaml

Deixar disponivel porta 

kubectl expose deployment kubernetes-dashboard --name=kubernetes-dashboard-nodeport --port=443 --target-port=8443 --type=NodePort -n kubernetes-dashboard

Criando Service Account e associando permissao 'cluster-admin'
kubectl create serviceaccount kubeadmin -n kube-system
kubectl create clusterrolebinding kubeadmin-binding --clusterrole=cluster-admin --serviceaccount=kube-system:kubeadmin
------------------------------------------------------------------------------------
-> Verificando usuario criado 

kubectl describe sa kubeadmin -n kube-system

---------------------------------------------------------------
Pegando secret para acesso dashboard
-> Você pode pegar abrindo o arquivo de conf do yaml e pegar o token para conveter para base64 com comandos abaixo :
-->kubectl get secret kubeadmin-token-6wn5m -n kubernetes-dashboard -o yaml
-- >echo `echo <TOKEN> | base64 --decode`

Também pode execultar esse comando abaixo que ja extrai 
kubectl -n kube-system describe secret kubeadmin-token-6wn5m  -n kube-system


Data
====
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IkdlOHN3Rko3TTRuN0tVOHQtT2g1cjktcDRjeEZZYzBmOVh5dEJnZ0RPY1kifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJlYWRtaW4tdG9rZW4tNnduNW0iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoia3ViZWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMWFlOTNiYTItOGRlYS00NjRkLWI5N2UtMWE1ZTZmMzY0MzViIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmt1YmVhZG1pbiJ9.mZUQ_4kMo1MLQ2PExHWLKy3cd_CE2k4dGfjhF7CNN4furWbwQS3rtzykgCong3V6_KdT-iIPsLWDaZ9EfDaj61N7k1fnBWzuitQmnLA3apbFbvU1dWZF-rCkk6BW92vGzeCpNBBmlqLy4SDaJMRLZzn6iIT40xjZ5JIqHWfVT8hW1EfIlXrBSDpJYxu96MO-z6cMfbqllTCCo4NFs8_niregfBJpU7EyJCtT0MIjZILlzTO31L7b7RIFEhVZT2hPMOVkJCPTof6_-qBpFDMYwdYiQQ_ZKpCoFnfmVFieXLlu9OHiy4F0WmOi3BCbhqnw7yxLSIUSPU7R3a7iIhRqwA
ca.crt:     1025 bytes

------------------------------------------------------------------------------------------------------------------------------
Criando namespaces
ns.yaml
---
apiVersion: v1
kind: Namespace
metadata:
  name: staging
---
apiVersion: v1
kind: Namespace
metadata:
  name: prod
---
apiVersion: v1
kind: Namespace
metadata:
  name: devops


kubectl apply -f ns.yaml 
namespace/staging created
namespace/prod created
namespace/devops created

kubectl get ns
NAME                   STATUS   AGE
default                Active   112m
devops                 Active   25s
kube-node-lease        Active   112m
kube-public            Active   112m
kube-system            Active   112m
kubernetes-dashboard   Active   46m
prod                   Active   25s
staging                Active   25s

--------------------------------------------------------------------------------
Docker recriando build com paramentros
docker build -t jefersonaraujo/frontend:1.0-staging  --build-arg NPM_ENV=staging .
docker login 
docker push  jefersonaraujo/frontend:1.0-staging

kubectl apply -f <filename> : Aplica um arquivo de configuração ao server.
kubectl get all --all-namespaces : Lista todos recursos em todos namespaces.
kubectl apply -f 02-frondend-deploy.yaml --namespace staging



--------------------------------------------------------------------

--deployment

controllers/nginx-deployment.yaml

kubectl apply -f 02-frondend-deploy.yaml --namespace staging
kubectl apply -f 02-frondend-services.yaml  

--------------------------------------------------------------------
### ADD CONFIG MAP
 kubectl apply -f 04-ConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: questcode
  namespace: staging
data:
  NODE_ENV: staging
  GITHUB_CLIENT_ID: a1219804f0a9437bc318


--------------------------------------------------------------------
#ADD  ConfigMap no backend-user
env:     
        - name: NODE_ENV          
          valueFrom:
            configMapKeyRef:
              name: questcode
              key: NODE_ENV
--------------------------------------------------------------------
## ADD secret + ConfigMap
1. ConfigMap : NODE_ENV + GITHUB_CLIENT_ID 
2. Secret : GITHUB_CLIENT_SECRET + SECRET_OR_KEY + MONGO_URI

## Encode e decode

echo -n 'bootcamping' | tr -d \\n | base64 -w 0
Ym9vdGNhbXBpbmc=

echo Ym9vdGNhbXBpbmc= | base64 --decode

## Github
 GITHUB_CLIENT_ID :  a1219804f0a9437bc318
 GITHUB_CLIENT_SECRET : c71ae1bc4ed872625b24b11307c1ec4fc2975047

 
 kubectl describe pod backend-scm -n staging
 kubectl logs backend-scm-7cc775559d-nnt25 -n staging



























          kubectl scale deployment  --replicas=1 frontend
          kubectl scale deployment  --replicas=1 backend-user -n staging
          kubectl scale deployment  --replicas=0 backend-user -n staging
          kubectl scale deployment  --replicas=0 kubernetes-dashboard -n kubernetes-dashboard

          kubectl get deployments -A

kubectl autoscale deployment frontend --cpu-percent=10 --min=1 --max=2
kubectl autoscale deployment kubernetes-bootcamp --cpu-percent=10 --min=1 --max=2
kubectl autoscale deployment backend-user  --cpu-percent=10 --min=1 --max=2 -n staging
kubectl autoscale deployment dashboard-metrics-scraper  --cpu-percent=10 --min=1 --max=2 -n kubernetes-dashboard
kubectl autoscale deployment kubernetes-dashboard  --cpu-percent=10 --min=1 --max=2 -n kubernetes-dashboard
kubectl delete deploy backend-user -n staging
